#!/bin/bash

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check and request sudo permissions at the start (macOS/Linux)
check_sudo() {
    if [[ "$(uname)" != "MINGW"* && "$(uname)" != "MSYS"* ]]; then
        if [ "$EUID" -ne 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Script n√†y c·∫ßn quy·ªÅn sudo ƒë·ªÉ s·ª≠a ƒë·ªïi c√°c file c·ªßa Cursor${NC}"
            echo -e "${CYAN}‚ÑπÔ∏è  ƒêang y√™u c·∫ßu quy·ªÅn qu·∫£n tr·ªã...${NC}"
            
            # Re-run script with sudo
            if command -v sudo >/dev/null 2>&1; then
                sudo "$0" "$@"
                exit $?
            else
                echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y sudo, vui l√≤ng ch·∫°y script v·ªõi quy·ªÅn root${NC}"
                exit 1
            fi
        fi
    fi
}

# Check and close Cursor app (macOS only)
close_cursor_app() {
    if [[ "$(uname)" == "Darwin" ]]; then
        if pgrep -x "Cursor" > /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Ph√°t hi·ªán Cursor ƒëang ch·∫°y${NC}"
            echo -e "${CYAN}‚ÑπÔ∏è  ƒêang ƒë√≥ng Cursor...${NC}"
            
            osascript -e 'quit app "Cursor"' 2>/dev/null || killall Cursor 2>/dev/null
            
            # Wait for app to close
            sleep 2
            
            if pgrep -x "Cursor" > /dev/null; then
                echo -e "${RED}‚ùå Kh√¥ng th·ªÉ ƒë√≥ng Cursor. Vui l√≤ng ƒë√≥ng th·ªß c√¥ng v√† ch·∫°y l·∫°i script${NC}"
                exit 1
            fi
            
            echo -e "${GREEN}‚úÖ ƒê√£ ƒë√≥ng Cursor th√†nh c√¥ng${NC}"
        fi
    fi
}

# Move Cursor.app to Desktop for patching (macOS only)
move_cursor_to_desktop() {
    if [[ "$(uname)" == "Darwin" ]]; then
        local original_path="/Applications/Cursor.app"
        local desktop_path="$HOME/Desktop/Cursor.app"
        
        # Check if Cursor exists in /Applications/
        if [ ! -d "$original_path" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y Cursor trong /Applications/${NC}"
            
            # Check if already on Desktop
            if [ -d "$desktop_path" ]; then
                echo -e "${GREEN}‚úÖ Cursor ƒë√£ c√≥ s·∫µn tr√™n Desktop${NC}"
                export CURSOR_APP_PATH="$desktop_path"
                return 0
            fi
            
            echo -e "${RED}‚ùå Kh√¥ng t√¨m th·∫•y Cursor.app${NC}"
            return 1
        fi
        
        # Check if Cursor can be modified in /Applications/
        if [ -w "$original_path/Contents/Resources/app/package.json" ]; then
            echo -e "${GREEN}‚úÖ Cursor trong /Applications/ c√≥ th·ªÉ s·ª≠a ƒë·ªïi ƒë∆∞·ª£c${NC}"
            export CURSOR_APP_PATH="$original_path"
            return 0
        fi
        
        echo ""
        echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  GI·∫¢I PH√ÅP T·ª∞ ƒê·ªòNG CHO L·ªñI 'Operation not permitted'${NC}"
        echo -e "${YELLOW}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo ""
        echo -e "${CYAN}üì¶ macOS b·∫£o v·ªá c√°c ·ª©ng d·ª•ng trong /Applications/${NC}"
        echo -e "${CYAN}üí° Script s·∫Ω t·ª± ƒë·ªông copy Cursor ra Desktop ƒë·ªÉ patch${NC}"
        echo ""
        
        # Check if Desktop already has Cursor
        if [ -d "$desktop_path" ]; then
            echo -e "${GREEN}‚úÖ Ph√°t hi·ªán Cursor.app ƒë√£ c√≥ tr√™n Desktop${NC}"
            echo -e "${CYAN}‚ÑπÔ∏è  S·ª≠ d·ª•ng Cursor.app hi·ªán c√≥ (b·ªè qua vi·ªác copy)${NC}"
            export CURSOR_APP_PATH="$desktop_path"
            return 0
        fi
        
        echo -e "${CYAN}‚ÑπÔ∏è  ƒêang copy Cursor.app ra Desktop...${NC}"
        echo -e "${YELLOW}   (Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t)${NC}"
        
        if cp -R "$original_path" "$desktop_path" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ ƒê√£ copy Cursor.app ra Desktop th√†nh c√¥ng!${NC}"
            echo -e "${CYAN}‚ÑπÔ∏è  V·ªã tr√≠: ${desktop_path}${NC}"
            export CURSOR_APP_PATH="$desktop_path"
            
            # Remove extended attributes from copied app
            echo -e "${CYAN}‚ÑπÔ∏è  ƒêang x√≥a c√°c thu·ªôc t√≠nh b·∫£o v·ªá...${NC}"
            xattr -cr "$desktop_path" 2>/dev/null
            
            echo ""
            echo -e "${GREEN}‚úÖ B·∫°n c√≥ th·ªÉ:${NC}"
            echo -e "${CYAN}   ‚Ä¢ S·ª≠ d·ª•ng Cursor t·ª´ Desktop (khuy·∫øn ngh·ªã)${NC}"
            echo -e "${CYAN}   ‚Ä¢ Ho·∫∑c x√≥a /Applications/Cursor.app n·∫øu mu·ªën${NC}"
            echo ""
            
            return 0
        else
            echo -e "${RED}‚ùå Kh√¥ng th·ªÉ copy Cursor.app ra Desktop${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Vui l√≤ng copy th·ªß c√¥ng: cp -R /Applications/Cursor.app ~/Desktop/${NC}"
            return 1
        fi
    fi
}

# Logo
print_logo() {
    echo -e "${CYAN}"
    cat << "EOF"
   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   
  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó  
  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  
  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  
  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  
EOF
    echo -e "${NC}"
}

# Get download folder path
get_downloads_dir() {
    if [[ "$(uname)" == "Darwin" ]]; then
        echo "$HOME/Downloads"
    else
        if [ -f "$HOME/.config/user-dirs.dirs" ]; then
            . "$HOME/.config/user-dirs.dirs"
            echo "${XDG_DOWNLOAD_DIR:-$HOME/Downloads}"
        else
            echo "$HOME/Downloads"
        fi
    fi
}

# Get latest version
get_latest_version() {
    echo -e "${CYAN}‚ÑπÔ∏è ƒêang ki·ªÉm tra phi√™n b·∫£n m·ªõi nh·∫•t...${NC}"
    latest_release=$(curl -s https://api.github.com/repos/yeongpin/cursor-free-vip/releases/latest) || {
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin phi√™n b·∫£n m·ªõi nh·∫•t${NC}"
        exit 1
    }
    
    VERSION=$(echo "$latest_release" | grep -o '"tag_name": ".*"' | cut -d'"' -f4 | tr -d 'v')
    if [ -z "$VERSION" ]; then
        echo -e "${RED}‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch phi√™n b·∫£n t·ª´ GitHub API:\n${latest_release}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ T√¨m th·∫•y phi√™n b·∫£n m·ªõi nh·∫•t: ${VERSION}${NC}"
}

# Detect system type and architecture
detect_os() {
    if [[ "$(uname)" == "Darwin" ]]; then
        # Detect macOS architecture
        ARCH=$(uname -m)
        if [[ "$ARCH" == "arm64" ]]; then
            OS="mac_arm64"
            echo -e "${CYAN}‚ÑπÔ∏è Ph√°t hi·ªán macOS ARM64 (Apple Silicon)${NC}"
        else
            OS="mac_intel"
            echo -e "${CYAN}‚ÑπÔ∏è Ph√°t hi·ªán macOS Intel${NC}"
        fi
    elif [[ "$(uname)" == "Linux" ]]; then
        # Detect Linux architecture
        ARCH=$(uname -m)
        if [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]]; then
            OS="linux_arm64"
            echo -e "${CYAN}‚ÑπÔ∏è Ph√°t hi·ªán Linux ARM64${NC}"
        else
            OS="linux_x64"
            echo -e "${CYAN}‚ÑπÔ∏è Ph√°t hi·ªán Linux x64${NC}"
        fi
    else
        # Assume Windows
        OS="windows"
        echo -e "${CYAN}‚ÑπÔ∏è Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh Windows${NC}"
    fi
}

# Install and download
install_cursor_free_vip() {
    local downloads_dir=$(get_downloads_dir)
    local binary_name="CursorFreeVIP_${VERSION}_${OS}"
    local binary_path="${downloads_dir}/${binary_name}"
    local download_url="https://github.com/minhcopilot/cursor-reset-id/releases/download/v${VERSION}/${binary_name}"
    
    # Check if file already exists
    if [ -f "${binary_path}" ]; then
        echo -e "${GREEN}‚úÖ ƒê√£ t√¨m th·∫•y file c√†i ƒë·∫∑t${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è V·ªã tr√≠: ${binary_path}${NC}"
        
        # Show Cursor path info if on macOS
        if [[ "$(uname)" == "Darwin" && -n "$CURSOR_APP_PATH" ]]; then
            echo -e "${CYAN}‚ÑπÔ∏è Cursor s·∫Ω ƒë∆∞·ª£c patch t·∫°i: ${CURSOR_APP_PATH}${NC}"
        fi
        
        echo -e "${CYAN}‚ÑπÔ∏è ƒêang kh·ªüi ƒë·ªông ch∆∞∆°ng tr√¨nh...${NC}"
        echo ""
        
        chmod +x "${binary_path}"
        
        # Export CURSOR_APP_PATH for the tool to use
        if [[ -n "$CURSOR_APP_PATH" ]]; then
            export CURSOR_APP_PATH
        fi
        
        "${binary_path}"
        return
    fi
    
    echo -e "${CYAN}‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file c√†i ƒë·∫∑t, b·∫Øt ƒë·∫ßu t·∫£i xu·ªëng...${NC}"
    echo -e "${CYAN}‚ÑπÔ∏è ƒêang t·∫£i v·ªÅ ${downloads_dir}...${NC}"
    echo -e "${CYAN}‚ÑπÔ∏è Link t·∫£i: ${download_url}${NC}"
    
    # Check if file exists
    if curl --output /dev/null --silent --head --fail "$download_url"; then
        echo -e "${GREEN}‚úÖ File t·ªìn t·∫°i, b·∫Øt ƒë·∫ßu t·∫£i xu·ªëng...${NC}"
    else
        echo -e "${RED}‚ùå Link t·∫£i kh√¥ng t·ªìn t·∫°i: ${download_url}${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è ƒêang th·ª≠ phi√™n b·∫£n kh√¥ng ph√¢n bi·ªát ki·∫øn tr√∫c...${NC}"
        
        # Try without architecture
        if [[ "$OS" == "mac_arm64" || "$OS" == "mac_intel" ]]; then
            OS="mac"
            binary_name="CursorFreeVIP_${VERSION}_${OS}"
            download_url="https://github.com/minhcopilot/cursor-reset-id/releases/download/v${VERSION}/${binary_name}"
            echo -e "${CYAN}‚ÑπÔ∏è Link t·∫£i m·ªõi: ${download_url}${NC}"
            
            if ! curl --output /dev/null --silent --head --fail "$download_url"; then
                echo -e "${RED}‚ùå Link t·∫£i m·ªõi kh√¥ng t·ªìn t·∫°i${NC}"
                exit 1
            fi
        elif [[ "$OS" == "linux_x64" || "$OS" == "linux_arm64" ]]; then
            OS="linux"
            binary_name="CursorFreeVIP_${VERSION}_${OS}"
            download_url="https://github.com/minhcopilot/cursor-reset-id/releases/download/v${VERSION}/${binary_name}"
            echo -e "${CYAN}‚ÑπÔ∏è Link t·∫£i m·ªõi: ${download_url}${NC}"
            
            if ! curl --output /dev/null --silent --head --fail "$download_url"; then
                echo -e "${RED}‚ùå Link t·∫£i m·ªõi kh√¥ng t·ªìn t·∫°i${NC}"
                exit 1
            fi
        else
            exit 1
        fi
    fi
    
    # Download file
    if ! curl -L -o "${binary_path}" "$download_url"; then
        echo -e "${RED}‚ùå T·∫£i xu·ªëng th·∫•t b·∫°i${NC}"
        exit 1
    fi
    
    # Check downloaded file size
    local file_size=$(stat -f%z "${binary_path}" 2>/dev/null || stat -c%s "${binary_path}" 2>/dev/null)
    echo -e "${CYAN}‚ÑπÔ∏è K√≠ch th∆∞·ªõc file ƒë√£ t·∫£i: ${file_size} bytes${NC}"
    
    # If file is too small, it might be an error message
    if [ "$file_size" -lt 1000 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è C·∫£nh b√°o: File t·∫£i xu·ªëng qu√° nh·ªè, c√≥ th·ªÉ kh√¥ng ph·∫£i file th·ª±c thi h·ª£p l·ªá${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è N·ªôi dung file:${NC}"
        cat "${binary_path}"
        echo ""
        echo -e "${RED}‚ùå T·∫£i xu·ªëng th·∫•t b·∫°i, vui l√≤ng ki·ªÉm tra phi√™n b·∫£n v√† h·ªá ƒëi·ªÅu h√†nh${NC}"
        exit 1
    fi
    
    echo -e "${CYAN}‚ÑπÔ∏è ƒêang thi·∫øt l·∫≠p quy·ªÅn th·ª±c thi...${NC}"
    if chmod +x "${binary_path}"; then
        echo -e "${GREEN}‚úÖ C√†i ƒë·∫∑t ho√†n t·∫•t!${NC}"
        echo -e "${CYAN}‚ÑπÔ∏è Ch∆∞∆°ng tr√¨nh ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ: ${binary_path}${NC}"
        
        # Show Cursor path info if on macOS
        if [[ "$(uname)" == "Darwin" && -n "$CURSOR_APP_PATH" ]]; then
            echo -e "${CYAN}‚ÑπÔ∏è Cursor s·∫Ω ƒë∆∞·ª£c patch t·∫°i: ${CURSOR_APP_PATH}${NC}"
        fi
        
        echo -e "${CYAN}‚ÑπÔ∏è ƒêang kh·ªüi ƒë·ªông ch∆∞∆°ng tr√¨nh...${NC}"
        echo ""
        
        # Export CURSOR_APP_PATH for the tool to use
        if [[ -n "$CURSOR_APP_PATH" ]]; then
            export CURSOR_APP_PATH
        fi
        
        # Run program directly
        "${binary_path}"
    else
        echo -e "${RED}‚ùå C√†i ƒë·∫∑t th·∫•t b·∫°i${NC}"
        exit 1
    fi
}

# Main program
main() {
    print_logo
    check_sudo "$@"
    close_cursor_app
    move_cursor_to_desktop
    get_latest_version
    detect_os
    install_cursor_free_vip
}

# Run main program
main "$@" 
